"""Collection of Models used in blogsite."""
from datetime import datetime
from .database import db, app_bcrypt
from sqlalchemy.ext.hybrid import hybrid_property

# Many To Many Relationship Table for Blog Posts to Tags
tags = db.Table('tags',
                db.Column('tag_id', db.Integer, db.ForeignKey('tag.id')),
                db.Column('post_id', db.Integer, db.ForeignKey('post.id'))
                )


class User(db.Model):
    """Model represnting a user.

    Attributes
    ----------
    id : SQLAlchemy.Column
        Autogenerated primary key
    username : SQLAlchemy.Column
    _password : SQLAlchemy.Column
        Hashed password stored in database
    email : SQLAlchemy.Column
    """

    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    username = db.Column(db.String(64), unique=True)
    _password = db.Column(db.String(128))
    email = db.Column(db.String(128), unique=True)

    def __init__(self, username, password, email):
        """Constructor for User."""
        self.username = username
        self.password = password
        self.email = email

    @hybrid_property
    def password(self):
        """Password getter method."""
        return self._password

    @password.setter
    def _set_password(self, plaintext):
        """Password setter method."""
        self._password = app_bcrypt.generate_password_hash(plaintext)

    def is_correct_password(self, plaintext):
        """Check if password is correct."""
        return app_bcrypt.check_password_hash(self._password, plaintext)

    def __repr__(self):
        """Representation."""
        return '<User %r>' % (self.username)


class Post(db.Model):
    """Model representing a blog post.

    Attributes
    ----------
    id : SQLAlchemy.Column
        Autogenerated primary key
    title : SQLAlchemy.Column
    body : SQLAlchemy.Column
    pub_date : SQLAlchemy.Column
        Date and Time of Post creation
    tag_id : SQLAlchemy.Column
        Foreign Key ID to tag
    tags : SQLAlchemy.relationship
        tag object that relates to this Post
    """

    # Columns
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    title = db.Column(db.String(128), nullable=False)
    body = db.Column(db.String(4096), nullable=False)
    pub_date = db.Column(db.DateTime, nullable=False)
    tag_id = db.Column(db.Integer, db.ForeignKey('tag.id'), nullable=True)
    tags = db.relationship('Tag', secondary=tags,
                           backref=db.backref('posts', lazy='dynamic'))

    def __init__(self, title, body, tags=None, pub_date=None):
        """Constructor for Post.

        Parameters
        ----------
        title : String
            Title/Summary of post
        body : String
            Contents
        tags : tag, optional
            tag objects blog post is related to
        pub_date : DateTime, optional
            Publish date of blog post
        """
        self.title = title
        self.body = body

        if tags is None:
            tags = []
        self.tags = tags

        if pub_date is None:
            pub_date = datetime.utcnow()
        self.pub_date = pub_date

    def __repr__(self):
        """Representation."""
        return '<Post %r:%r>' % (self.id, self.title)


class Tag(db.Model):
    """Model to represent a overall tag.

    Attributes
    ----------
    id : SQLAlchemy.Column
    name : SQLAlchemy.Column
    posts : SQLAlchemy.orm.dynamic.AppenderBaseQuery
        Defined in Posts Class
        Allows to see what posts have this tag
    """

    # Columns
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(128), unique=True)

    def __init__(self, name):
        """Constructor for Tag.

        Parameters
        ----------
        name : String
            Name of new tag
        """
        self.name = name

    def __repr__(self):
        """Representation."""
        return '<Tag %r>' % self.name
